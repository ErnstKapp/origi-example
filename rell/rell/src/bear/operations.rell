
	
	
operation initialize(auth_id) {
    require(op_context.is_signer(chain_context.args.admin_pubkey));

	val account = do_auth(auth_id, ["T"]);	
	register_asset_if_needed();
	initialize_original_interfaces(account);
	IBear.register(account);
	//val bear_byte = chain_context.args.bearskin.to_bytes();
    //make_new_bear(account);
    
}

 
operation make_new_bear(auth_id){	
	
	val account = do_auth(auth_id, ["T"]);
	print("id used for minting: " + account.id);
	val bear_prototypes = get_prototypes_implementing_interface(IBear.get());
	val bear_prototype = bear_prototypes[0];
	Minter.mint_non_fungible_original(
		account,
		Minter.I(
			interface_name = IBear.interface,
			[
				IBear.skin: Text.T("Richard")		
			],
			prototype_name = bear_prototype.name
		)
	);
}

function get_prototypes_implementing_interface(Interface.dclass) {
  return (
    p: Prototype.prototype,
    id: instance_dclass
  ) @* {
    p.instance == id.instance,
    id.dclass == dclass
  } ( p );
}