
	
	
operation initialize(auth_id) {
    require(op_context.is_signer(chain_context.args.admin_pubkey));

	val account = do_auth(auth_id, ["T"]);	
	register_asset_if_needed();
	initialize_original_interfaces(account);
	IBear.register(account);
	ITshirt.register(account);
    
}

 
operation make_new_bear(auth_id, age: integer){	
	
	val account = do_auth(auth_id, ["T"]);
	print("id used for minting: " + account.id);
	val bear_prototypes = get_prototypes_implementing_interface(IBear.get());
	val bear_prototype = bear_prototypes[0];
	Minter.mint_non_fungible_original(
		account,
		Minter.I(
			interface_name = IBear.interface,
			[
				IBear.age: Integer.T(age)	
			],
			prototype_name = bear_prototype.name
		)
	);
}

operation make_new_tshirt(auth_id, color: text){	
	
	val account = do_auth(auth_id, ["T"]);
	print("id used for minting: " + account.id);
	val shirt_prototypes = get_prototypes_implementing_interface(ITshirt.get());
	val shirt_prototype = shirt_prototypes[0];
	Minter.mint_non_fungible_original(
		account,
		Minter.I(
			interface_name = ITshirt.interface,
			[
				ITshirt.color: Text.T(color)	
			],
			prototype_name = shirt_prototype.name
		)
	);
}

operation give_bear_tshirt(auth_id)
	{
	
	val account = do_auth(auth_id, ["T"]);
	val account_id = account.id;
  	

  	val original_bear_ids = Ownership.find_all_original_ids_with_interface(
    account_id,
    IBear.get(),
    100,
    0
  	);
  	
  	val original_shirt_ids = Ownership.find_all_original_ids_with_interface(
    account_id,
    ITshirt.get(),
    100,
    0
  	);

  	require(original_bear_ids.size() == 1, "The number of bears is not correct");
  	val bear = Id.get_instance(original_bear_ids[0]);
  	val shirt = Id.get_instance(original_shirt_ids[0]);	
	update_tshirt(shirt, bear);
	}
	
operation transfer_original(from_account_id: byte_array, to_account_id: byte_array){
	val from_account = require(
    	ft3.acc.account @? { .id == from_account_id },
    	"Account not found: " + from_account_id
  		);
  	
  	val original_shirt_ids = Ownership.find_all_original_ids_with_interface(
    from_account_id,
    ITshirt.get(),
    100,
    0
  	);
  	
  	val shirt = Id.get_instance(original_shirt_ids[0]);	
  	
  	Ownership.transfer(from_account, shirt, to_account_id);
  	
}

function update_tshirt(Tshirt_instance: instance, bear_instance: instance)
	{
		IBear.setTshirt(bear_instance,Tshirt_instance);
	}

function get_prototypes_implementing_interface(Interface.dclass) {
  return (
    p: Prototype.prototype,
    id: instance_dclass
  ) @* {
    p.instance == id.instance,
    id.dclass == dclass
  } ( p );
}