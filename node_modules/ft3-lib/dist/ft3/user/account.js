"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var asset_balance_1 = require("./asset-balance");
var auth_descriptor_factory_1 = require("./auth-descriptor/auth-descriptor-factory");
var payment_history_1 = require("./payment-history/payment-history");
var payment_history_sync_manager_1 = require("./payment-history/payment-history-sync-manager");
var account_operations_1 = require("./account-operations");
var account_dev_operations_1 = require("./account-dev-operations");
var account_queries_1 = require("./account-queries");
var rate_limit_1 = require("./rate-limit");
var AuthType;
(function (AuthType) {
    AuthType["single_sig"] = "S";
    AuthType["multi_sig"] = "M";
})(AuthType || (AuthType = {}));
exports.AuthType = AuthType;
var FlagsType;
(function (FlagsType) {
    FlagsType["Account"] = "A";
    FlagsType["Transfer"] = "T"; // Transfer balance
})(FlagsType || (FlagsType = {}));
exports.FlagsType = FlagsType;
var Flags = /** @class */ (function () {
    function Flags(flags) {
        this.flagsOrder = [FlagsType.Account, FlagsType.Transfer];
        this.flags = flags;
    }
    Flags.prototype.hasFlag = function (flag) {
        return this.flags.has(flag);
    };
    Flags.prototype.toGTV = function () {
        var _this = this;
        return this.flagsOrder
            .map(function (flag) { return _this.flags.has(flag) ? flag : null; })
            .filter(function (flag) { return flag; });
    };
    return Flags;
}());
exports.Flags = Flags;
var Account = /** @class */ (function () {
    function Account(id, authDescriptor, session) {
        this.paymentHistorySyncManager = new payment_history_sync_manager_1.default();
        this.assets = [];
        this.id_ = id;
        this.authDescriptor = authDescriptor;
        this.session = session;
    }
    Object.defineProperty(Account.prototype, "id", {
        get: function () {
            return this.id_;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Account.prototype, "blockchain", {
        get: function () {
            return this.session.blockchain;
        },
        enumerable: true,
        configurable: true
    });
    Account.getByParticipantId = function (id, session) {
        return __awaiter(this, void 0, void 0, function () {
            var accountIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, session.query.apply(session, __spread(account_queries_1.accountsByParticipantId(id)))];
                    case 1:
                        accountIds = _a.sent();
                        return [4 /*yield*/, this.getByIds(accountIds.map(function (id) { return Buffer.from(id, 'hex'); }), session)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Account.getByAuthDescriptorId = function (id, session) {
        return __awaiter(this, void 0, void 0, function () {
            var accountIds;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, session.query.apply(session, __spread(account_queries_1.accountsByAuthDescriptorId(id)))];
                    case 1:
                        accountIds = _a.sent();
                        return [4 /*yield*/, this.getByIds(accountIds.map(function (id) { return Buffer.from(id, 'hex'); }), session)];
                    case 2: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Account.register = function (authDescriptor, session) {
        return __awaiter(this, void 0, void 0, function () {
            var account;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, session.call(account_dev_operations_1.register(authDescriptor))];
                    case 1:
                        _a.sent();
                        account = new Account(authDescriptor.hash(), [authDescriptor], session);
                        return [4 /*yield*/, account.sync()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, account];
                }
            });
        });
    };
    /* obsolete - keep for backward compatibility */
    Account.rawRegisterTransaction = function (authDescriptor, ssoAuthDescriptor, session) {
        return session.blockchain.transactionBuilder()
            .add(account_dev_operations_1.register(authDescriptor))
            .add(account_operations_1.addAuthDescriptor(authDescriptor.id, authDescriptor.id, ssoAuthDescriptor))
            .build([authDescriptor.signers, ssoAuthDescriptor.signers].flat())
            .sign(session.user.keyPair)
            .raw();
    };
    Account.rawTransactionRegister = function (user, authDescriptor, blockchain) {
        return blockchain.transactionBuilder()
            .add(account_dev_operations_1.register(user.authDescriptor))
            .add(account_operations_1.addAuthDescriptor(user.authDescriptor.id, user.authDescriptor.id, authDescriptor))
            .build([user.authDescriptor.signers, authDescriptor.signers].flat())
            .sign(user.keyPair)
            .raw();
    };
    Account.rawTransactionAddAuthDescriptor = function (accountId, user, authDescriptor, blockchain) {
        return blockchain.transactionBuilder()
            .add(account_operations_1.addAuthDescriptor(accountId, user.authDescriptor.id, authDescriptor))
            .build([user.authDescriptor.signers, authDescriptor.signers].flat())
            .sign(user.keyPair)
            .raw();
    };
    Account.getByIds = function (ids, session) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.all(ids.map(function (id) { return _this.getById(id, session); }))];
            });
        });
    };
    Account.getById = function (id, session) {
        return __awaiter(this, void 0, void 0, function () {
            var account, acc;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, session.query.apply(session, __spread(account_queries_1.accountById(id)))];
                    case 1:
                        account = _a.sent();
                        if (!account) {
                            return [2 /*return*/, null];
                        }
                        acc = new Account(id, [], session);
                        return [4 /*yield*/, acc.sync()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, acc];
                }
            });
        });
    };
    Account.prototype.addAuthDescriptor = function (authDescriptor) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.session.call(account_operations_1.addAuthDescriptor(this.id, this.session.user.authDescriptor.id, authDescriptor))];
                    case 1:
                        _a.sent();
                        this.authDescriptor.push(authDescriptor);
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.isAuthDescriptorValid = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.session.query("ft3.is_auth_descriptor_valid", {
                            account_id: this.id,
                            auth_descriptor_id: id,
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Account.prototype.deleteAllAuthDescriptorsExclude = function (authDescriptor) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.session.call(account_operations_1.deleteAllAuthDescriptorsExclude(this.id, authDescriptor.id))];
                    case 1:
                        _a.sent();
                        this.authDescriptor = [authDescriptor];
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.deleteAuthDescriptor = function (authDescriptor) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.session.call(account_operations_1.deleteAuthDescriptor(this.id, this.session.user.authDescriptor.id, authDescriptor.id))];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.syncAuthDescriptors()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.sync = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, Promise.all([this.syncAssets(), this.syncAuthDescriptors(), this.syncRateLimit()])];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.syncAssets = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, asset_balance_1.default.getByAccountId(this.id, this.session.blockchain)];
                    case 1:
                        _a.assets = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.syncAuthDescriptors = function () {
        return __awaiter(this, void 0, void 0, function () {
            var authDescriptors, authDescriptorFactory;
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, (_a = this.session).query.apply(_a, __spread(account_queries_1.accountAuthDescriptors(this.id)))];
                    case 1:
                        authDescriptors = _b.sent();
                        authDescriptorFactory = new auth_descriptor_factory_1.default();
                        this.authDescriptor = authDescriptors.map(function (authDescriptor) {
                            return authDescriptorFactory.create(authDescriptor.type, Buffer.from(authDescriptor.args, 'hex'));
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.syncRateLimit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, rate_limit_1.default.getByAccountRateLimit(this.id_, this.session.blockchain)];
                    case 1:
                        _a.rateLimit = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.getAssetById = function (id) {
        //TODO: find better way to compare buffers
        return this.assets.find(function (assetBalance) { return (assetBalance.asset.id.toString('hex') === id.toString('hex')); });
    };
    Account.prototype.transferInputsToOutputs = function (inputs, outputs) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.blockchain.transactionBuilder()
                            .add(account_operations_1.transfer(inputs, outputs))
                            .add(account_operations_1.nop())
                            .buildAndSign(this.session.user)
                            .post()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.syncAssets()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.transfer = function (accountId, assetId, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var input, output;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        input = [
                            this.id,
                            assetId,
                            this.session.user.authDescriptor.id,
                            amount,
                            []
                        ];
                        output = [
                            accountId,
                            assetId,
                            amount,
                            []
                        ];
                        return [4 /*yield*/, this.transferInputsToOutputs([input], [output])];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.burnTokens = function (assetId, amount) {
        return __awaiter(this, void 0, void 0, function () {
            var input;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        input = [
                            this.id,
                            assetId,
                            this.session.user.authDescriptor.id,
                            amount,
                            []
                        ];
                        return [4 /*yield*/, this.transferInputsToOutputs([input], [])];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Account.prototype.getPaymentHistory = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, payment_history_1.default.getByAccountId(this.id, -1, this.session.blockchain)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Account.prototype.getPaymentHistoryIterator = function (pageSize) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (pageSize < 1)
                            throw new Error('Page size has to be greater than 1');
                        return [4 /*yield*/, this.paymentHistorySyncManager.syncAccount(this.id, this.session.blockchain)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.paymentHistorySyncManager.paymentHistoryStore.getIterator(this.session.blockchain.id, this.id, pageSize)];
                }
            });
        });
    };
    Account.prototype.xcTransfer = function (destinationChainId, destinationAccountId, assetId, amount) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.blockchain.transactionBuilder()
                            .add(this.xcTransferOp(destinationChainId, destinationAccountId, assetId, amount))
                            .add(account_operations_1.nop())
                            .buildAndSign(this.session.user)
                            .post()];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.syncAssets()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /* Operation and query */
    Account.prototype.xcTransferOp = function (destinationChainId, destinationAccountId, assetId, amount) {
        var source = [
            this.id,
            assetId,
            this.session.user.authDescriptor.id,
            amount,
            []
        ];
        var target = [
            destinationAccountId,
            []
        ];
        var hops = [
            destinationChainId
        ];
        return account_operations_1.xcTransfer(source, target, hops);
    };
    return Account;
}());
exports.Account = Account;
//# sourceMappingURL=account.js.map