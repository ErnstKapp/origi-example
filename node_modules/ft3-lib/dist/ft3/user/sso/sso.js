"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var account_1 = require("../account");
var postchain_client_1 = require("postchain-client");
var transaction_1 = require("../../core/transaction");
var user_1 = require("../user");
var single_signature_auth_descriptor_1 = require("../auth-descriptor/single-signature-auth-descriptor");
var sso_store_default_1 = require("./sso-store-default");
var vaultUrl = 'https://vault-testnet.chromia.com';
var Operations = {
    register: 'ft3.dev_register_account',
    addAuthDescriptor: 'ft3.add_auth_descriptor',
};
function assert(condition, error) {
    if (!condition) {
        throw new Error(error);
    }
}
function getAccountId(transaction) {
    var operations = transaction.operations;
    if (operations.length === 1) {
        return Buffer.from(operations[0].args[0], 'hex');
    }
    else if (operations.length === 2) {
        return Buffer.from(operations[1].args[0], 'hex');
    }
    else {
        throw new Error('Invalid sso transaction');
    }
}
function validateRegisterAccountOperation(operation) {
    assert(operation.name === Operations.register, "Expected '" + Operations.register + "', found '" + operation.name + "'");
}
function validateAddAuthDescriptorOperation(operation, pubKey) {
    assert(operation.name === Operations.addAuthDescriptor, "Expected '" + Operations.addAuthDescriptor + "', found '" + operation.name + "'");
}
function validateTransaction(transaction, pubKey) {
    var operations = transaction.operations;
    if (operations.length === 1) {
        validateAddAuthDescriptorOperation(operations[0], pubKey);
    }
    else if (operations.length === 2) {
        validateRegisterAccountOperation(operations[0]);
        validateAddAuthDescriptorOperation(operations[1], pubKey);
    }
    else {
        throw new Error("Invalid operation count. Found " + operations.length + " operations in sso transaction");
    }
}
var SSO = /** @class */ (function () {
    function SSO(blockchain, store) {
        if (store === void 0) { store = new sso_store_default_1.default(); }
        this.blockchain = blockchain;
        this.store = store;
    }
    Object.defineProperty(SSO, "vaultUrl", {
        get: function () {
            return vaultUrl;
        },
        set: function (value) {
            vaultUrl = value;
        },
        enumerable: true,
        configurable: true
    });
    SSO.prototype.getAccountAndUserByStoredIds = function () {
        return __awaiter(this, void 0, void 0, function () {
            var keyPair, accountId, authDescriptor, user, account;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyPair = this.store.keyPair;
                        accountId = this.store.accountId;
                        if (!keyPair || !accountId) {
                            return [2 /*return*/, [null, null]];
                        }
                        authDescriptor = new single_signature_auth_descriptor_1.default(keyPair.pubKey, [account_1.FlagsType.Transfer]);
                        user = new user_1.default(keyPair, authDescriptor);
                        return [4 /*yield*/, this.blockchain.newSession(user).getAccountById(accountId)];
                    case 1:
                        account = _a.sent();
                        if (!account || !user) {
                            return [2 /*return*/, [null, null]];
                        }
                        return [2 /*return*/, [account, user]];
                }
            });
        });
    };
    SSO.prototype.autoLogin = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, account, user, isAuthDescriptorValid;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getAccountAndUserByStoredIds()];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), account = _a[0], user = _a[1];
                        if (!account || !user) {
                            return [2 /*return*/, [null, null]];
                        }
                        return [4 /*yield*/, account.isAuthDescriptorValid(user.authDescriptor.id)];
                    case 2:
                        isAuthDescriptorValid = _b.sent();
                        if (!isAuthDescriptorValid) {
                            return [2 /*return*/, [null, null]];
                        }
                        return [2 /*return*/, [account, user]];
                }
            });
        });
    };
    SSO.prototype.initiateLogin = function (successUrl, cancelUrl) {
        this.store.clear();
        var keyPair = postchain_client_1.util.makeKeyPair();
        this.store.tmpPrivKey = keyPair.privKey;
        window.location.href = vaultUrl + "/?route=/authorize&dappId=" + this.blockchain.id.toString('hex') + "&pubkey=" + keyPair.pubKey.toString('hex') + "&successAction=" + encodeURIComponent(successUrl) + "&cancelAction=" + encodeURIComponent(cancelUrl) + "&version=0.1";
    };
    SSO.prototype.finalizeLogin = function (tx) {
        return __awaiter(this, void 0, void 0, function () {
            var keyPair, authDescriptor, user, transaction, accountId, account;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        keyPair = this.store.tmpKeyPair;
                        this.store.clearTmp();
                        if (!keyPair) {
                            throw new Error('Error loading public key');
                        }
                        this.store.privKey = keyPair.privKey;
                        authDescriptor = new single_signature_auth_descriptor_1.default(keyPair.pubKey, [account_1.FlagsType.Transfer]);
                        user = new user_1.default(keyPair, authDescriptor);
                        transaction = transaction_1.default
                            .fromRawTransaction(Buffer.from(tx, 'hex'), this.blockchain)
                            .sign(keyPair);
                        validateTransaction(transaction, keyPair.pubKey);
                        return [4 /*yield*/, transaction.post()];
                    case 1:
                        _a.sent();
                        accountId = getAccountId(transaction);
                        this.store.accountId = accountId;
                        return [4 /*yield*/, this.blockchain.newSession(user).getAccountById(accountId)];
                    case 2:
                        account = _a.sent();
                        return [2 /*return*/, [account, user]];
                }
            });
        });
    };
    SSO.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, account, user;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.getAccountAndUserByStoredIds()];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), account = _a[0], user = _a[1];
                        if (!(account && user)) return [3 /*break*/, 3];
                        return [4 /*yield*/, account.deleteAuthDescriptor(user.authDescriptor)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        this.store.clear();
                        return [2 /*return*/];
                }
            });
        });
    };
    return SSO;
}());
exports.default = SSO;
//# sourceMappingURL=sso.js.map