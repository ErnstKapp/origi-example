"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Rules = /** @class */ (function () {
    function Rules() {
    }
    Object.defineProperty(Rules, "blockHeight", {
        get: function () {
            return new RuleVariable("block_height");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rules, "blockTime", {
        get: function () {
            return new RuleVariable("block_time");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Rules, "operationCount", {
        get: function () {
            return new RuleVariable("op_count");
        },
        enumerable: true,
        configurable: true
    });
    return Rules;
}());
exports.Rules = Rules;
var RuleVariable = /** @class */ (function () {
    function RuleVariable(variable) {
        this.variable = variable;
    }
    RuleVariable.prototype.lessThan = function (value) {
        return this.expression("lt", value);
    };
    RuleVariable.prototype.lessOrEqual = function (value) {
        return this.expression("le", value);
    };
    RuleVariable.prototype.equal = function (value) {
        return this.expression("eq", value);
    };
    RuleVariable.prototype.greaterThan = function (value) {
        return this.expression("gt", value);
    };
    RuleVariable.prototype.greaterOrEqual = function (value) {
        return this.expression("ge", value);
    };
    RuleVariable.prototype.expression = function (operator, value) {
        return new RuleExpression(this.variable, operator, value);
    };
    return RuleVariable;
}());
var RuleExpression = /** @class */ (function () {
    function RuleExpression(name, operator, value) {
        this.name = name;
        this.operator = operator;
        this.value = value;
    }
    Object.defineProperty(RuleExpression.prototype, "and", {
        get: function () {
            return new RuleCompositeExpressionOperator(this, "and");
        },
        enumerable: true,
        configurable: true
    });
    RuleExpression.prototype.toGTV = function () {
        return [
            this.name,
            this.operator,
            this.value
        ];
    };
    return RuleExpression;
}());
var RuleCompositeExpressionOperator = /** @class */ (function () {
    function RuleCompositeExpressionOperator(expression, operator) {
        this.expression = expression;
        this.operator = operator;
    }
    Object.defineProperty(RuleCompositeExpressionOperator.prototype, "blockHeight", {
        get: function () {
            return new RuleCompositeExpressionVariable(this.expression, "block_height", this.operator);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuleCompositeExpressionOperator.prototype, "blockTime", {
        get: function () {
            return new RuleCompositeExpressionVariable(this.expression, "block_time", this.operator);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(RuleCompositeExpressionOperator.prototype, "operationCount", {
        get: function () {
            return new RuleCompositeExpressionVariable(this.expression, "op_count", this.operator);
        },
        enumerable: true,
        configurable: true
    });
    return RuleCompositeExpressionOperator;
}());
var RuleCompositeExpressionVariable = /** @class */ (function () {
    function RuleCompositeExpressionVariable(expression, name, operator) {
        this.expression = expression;
        this.name = name;
        this.operator = operator;
    }
    RuleCompositeExpressionVariable.prototype.lessThan = function (value) {
        return this.compositeExpression("lt", value);
    };
    RuleCompositeExpressionVariable.prototype.lessOrEqual = function (value) {
        return this.compositeExpression("le", value);
    };
    RuleCompositeExpressionVariable.prototype.equal = function (value) {
        return this.compositeExpression("eq", value);
    };
    RuleCompositeExpressionVariable.prototype.greaterThan = function (value) {
        return this.compositeExpression("gt", value);
    };
    RuleCompositeExpressionVariable.prototype.greaterOrEqual = function (value) {
        return this.compositeExpression("ge", value);
    };
    RuleCompositeExpressionVariable.prototype.compositeExpression = function (operator, value) {
        return new RuleCompositeExpression(this.operator, this.expression, new RuleExpression(this.name, operator, value));
    };
    return RuleCompositeExpressionVariable;
}());
var RuleCompositeExpression = /** @class */ (function () {
    function RuleCompositeExpression(operator, left, right) {
        this.operator = operator;
        this.left = left;
        this.right = right;
    }
    Object.defineProperty(RuleCompositeExpression.prototype, "and", {
        get: function () {
            return new RuleCompositeExpressionOperator(this, "and");
        },
        enumerable: true,
        configurable: true
    });
    RuleCompositeExpression.prototype.toGTV = function () {
        return [this.left.toGTV(), this.operator, this.right.toGTV()];
    };
    return RuleCompositeExpression;
}());
//# sourceMappingURL=auth-descriptor-rule.js.map