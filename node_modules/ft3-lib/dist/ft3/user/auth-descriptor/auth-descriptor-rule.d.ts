import { GtvSerializable } from "../account";
export default interface AuthDescriptorRule extends GtvSerializable {
}
export declare class Rules {
    static readonly blockHeight: RuleVariable;
    static readonly blockTime: RuleVariable;
    static readonly operationCount: RuleVariable;
}
declare class RuleVariable {
    readonly variable: string;
    constructor(variable: string);
    lessThan(value: number): RuleExpression;
    lessOrEqual(value: number): RuleExpression;
    equal(value: number): RuleExpression;
    greaterThan(value: number): RuleExpression;
    greaterOrEqual(value: number): RuleExpression;
    private expression;
}
declare class RuleExpression implements AuthDescriptorRule {
    readonly name: string;
    readonly operator: string;
    readonly value: number;
    constructor(name: string, operator: string, value: number);
    readonly and: RuleCompositeExpressionOperator;
    toGTV(): any[];
}
declare class RuleCompositeExpressionOperator {
    readonly expression: RuleExpression | RuleCompositeExpression;
    readonly operator: string;
    constructor(expression: RuleExpression | RuleCompositeExpression, operator: string);
    readonly blockHeight: RuleCompositeExpressionVariable;
    readonly blockTime: RuleCompositeExpressionVariable;
    readonly operationCount: RuleCompositeExpressionVariable;
}
declare class RuleCompositeExpressionVariable {
    readonly expression: RuleExpression | RuleCompositeExpression;
    readonly name: string;
    readonly operator: string;
    constructor(expression: RuleExpression | RuleCompositeExpression, name: string, operator: string);
    lessThan(value: number): RuleCompositeExpression;
    lessOrEqual(value: number): RuleCompositeExpression;
    equal(value: number): RuleCompositeExpression;
    greaterThan(value: number): RuleCompositeExpression;
    greaterOrEqual(value: number): RuleCompositeExpression;
    private compositeExpression;
}
declare class RuleCompositeExpression implements AuthDescriptorRule {
    readonly operator: string;
    readonly left: RuleExpression | RuleCompositeExpression;
    readonly right: RuleExpression;
    constructor(operator: string, left: RuleExpression | RuleCompositeExpression, right: RuleExpression);
    readonly and: RuleCompositeExpressionOperator;
    toGTV(): any[];
}
export {};
