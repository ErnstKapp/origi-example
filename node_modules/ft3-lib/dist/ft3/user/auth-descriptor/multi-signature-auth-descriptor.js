"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var postchain_client_1 = require("postchain-client");
var account_1 = require("../account");
var MultiSignatureAuthDescriptor = /** @class */ (function () {
    function MultiSignatureAuthDescriptor(pubkeys, signaturesRequired, flags, rule) {
        if (rule === void 0) { rule = null; }
        this.rule = rule;
        if (signaturesRequired > pubkeys.length) {
            throw new Error('Number of required signatures have to be less or equal to number of pubkeys');
        }
        this.pubkeys = pubkeys;
        this.signaturesRequired = signaturesRequired;
        this.flags = new account_1.Flags(new Set(flags));
    }
    Object.defineProperty(MultiSignatureAuthDescriptor.prototype, "signers", {
        get: function () {
            return this.pubkeys;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MultiSignatureAuthDescriptor.prototype, "id", {
        get: function () {
            return this.hash();
        },
        enumerable: true,
        configurable: true
    });
    MultiSignatureAuthDescriptor.prototype.toGTV = function () {
        return [
            account_1.AuthType.multi_sig,
            this.pubkeys.map(function (pubkey) { return pubkey.toString('hex'); }),
            [
                this.flags.toGTV(),
                this.signaturesRequired,
                this.pubkeys.map(function (pubkey) { return pubkey.toString('hex'); })
            ],
            this.rule && this.rule.toGTV()
        ];
    };
    MultiSignatureAuthDescriptor.prototype.hash = function () {
        return postchain_client_1.gtv.gtvHash([
            account_1.AuthType.multi_sig,
            this.pubkeys,
            [
                this.flags.toGTV(),
                this.signaturesRequired,
                this.pubkeys.map(function (pubkey) { return pubkey.toString('hex'); })
            ],
            this.rule && this.rule.toGTV()
        ]);
    };
    return MultiSignatureAuthDescriptor;
}());
exports.default = MultiSignatureAuthDescriptor;
//# sourceMappingURL=multi-signature-auth-descriptor.js.map