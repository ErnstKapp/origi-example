"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PaymentHistoryIterator = /** @class */ (function () {
    function PaymentHistoryIterator(paymentHistoryStore, blockchainId, accountId, pageSize) {
        this.currentPage = -1;
        this.paymentHistoryStore = paymentHistoryStore;
        this.blockchainId = blockchainId;
        this.accountId = accountId;
        this.pageSize = pageSize;
    }
    Object.defineProperty(PaymentHistoryIterator.prototype, "pageCount", {
        get: function () {
            return Math.ceil(this.paymentHistoryStore.getCount(this.blockchainId, this.accountId) / this.pageSize);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentHistoryIterator.prototype, "totalCount", {
        get: function () {
            return this.paymentHistoryStore.getCount(this.blockchainId, this.accountId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(PaymentHistoryIterator.prototype, "current", {
        get: function () {
            return this.pageCount ? this.currentPage : 0;
        },
        enumerable: true,
        configurable: true
    });
    PaymentHistoryIterator.prototype.rewind = function () {
        var entries = this.paymentHistoryStore.get(this.blockchainId, this.accountId, 0, this.pageSize);
        this.currentPage = 0;
        return entries;
    };
    PaymentHistoryIterator.prototype.prev = function () {
        if (this.currentPage === 0) {
            return [];
        }
        var page = this.currentPage - 1;
        var entries = this.paymentHistoryStore.get(this.blockchainId, this.accountId, page * this.pageSize, this.pageSize);
        this.currentPage = page;
        return entries;
    };
    PaymentHistoryIterator.prototype.next = function () {
        if (!this.hasMore()) {
            return [];
        }
        var page = this.currentPage + 1;
        var entries = this.paymentHistoryStore.get(this.blockchainId, this.accountId, page * this.pageSize, this.pageSize);
        this.currentPage = page;
        return entries;
    };
    PaymentHistoryIterator.prototype.fastForward = function () {
        var page = this.pageCount - 1;
        var entries = this.paymentHistoryStore.get(this.blockchainId, this.accountId, page * this.pageSize, this.pageSize);
        this.currentPage = page;
        return entries;
    };
    PaymentHistoryIterator.prototype.hasMore = function () {
        return this.currentPage < this.pageCount - 1;
    };
    return PaymentHistoryIterator;
}());
exports.default = PaymentHistoryIterator;
//# sourceMappingURL=payment-history-iterator.js.map