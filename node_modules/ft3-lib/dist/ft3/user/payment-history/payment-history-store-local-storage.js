"use strict";
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var payment_history_iterator_1 = require("./payment-history-iterator");
var payment_history_entry_1 = require("./payment-history-entry");
var PaymentHistoryStoreLocalStorage = /** @class */ (function () {
    function PaymentHistoryStoreLocalStorage() {
        this.entriesCache = {};
    }
    PaymentHistoryStoreLocalStorage.prototype.getCount = function (blockchainId, accountId) {
        return this.getEntriesFor(blockchainId, accountId).length;
    };
    PaymentHistoryStoreLocalStorage.prototype.getIterator = function (blockchainId, accountId, pageSize) {
        return new payment_history_iterator_1.default(this, blockchainId, accountId, pageSize);
    };
    PaymentHistoryStoreLocalStorage.prototype.save = function (blockchainId, accountId, paymentHistoryEntries) {
        var entries = this.loadFromStore(blockchainId, accountId);
        var newEntries = paymentHistoryEntries.concat(entries);
        this.saveToStore(blockchainId, accountId, newEntries);
        this.entriesCache[this.paymentHistoryKey(blockchainId, accountId)] = newEntries;
    };
    PaymentHistoryStoreLocalStorage.prototype.get = function (blockchainId, accounId, start, pageSize) {
        var entries = this.getEntriesFor(blockchainId, accounId);
        if (entries.length < start) {
            return [];
        }
        return entries.slice(start, Math.min(entries.length, start + pageSize));
    };
    PaymentHistoryStoreLocalStorage.prototype.getSyncInfo = function (blockchainId, accountId) {
        var value = localStorage.getItem(this.syncInfoKey(blockchainId, accountId));
        return (value && JSON.parse(value)) || {};
    };
    PaymentHistoryStoreLocalStorage.prototype.saveSyncInfo = function (blockchainId, accountId, syncInfo) {
        localStorage.setItem(this.syncInfoKey(blockchainId, accountId), JSON.stringify(syncInfo));
    };
    PaymentHistoryStoreLocalStorage.prototype.getEntriesFor = function (blockchainId, accountId) {
        var entries = this.entriesCache[this.paymentHistoryKey(blockchainId, accountId)];
        if (!entries) {
            entries = this.loadFromStore(blockchainId, accountId);
            this.entriesCache[this.paymentHistoryKey(blockchainId, accountId)] = entries;
        }
        return entries;
    };
    PaymentHistoryStoreLocalStorage.prototype.paymentHistoryKey = function (blockchainId, accountId) {
        return "FT3_LIB_P_H_" + accountId.toString('hex').toUpperCase() + "_" + (blockchainId ? blockchainId.toString('hex').toUpperCase() : "");
    };
    PaymentHistoryStoreLocalStorage.prototype.syncInfoKey = function (blockchainId, accountId) {
        return "FT3_LIB_P_H_S_I_" + accountId.toString('hex').toUpperCase() + "_" + (blockchainId ? blockchainId.toString('hex').toUpperCase() : "");
    };
    PaymentHistoryStoreLocalStorage.prototype.loadFromStore = function (blockchainId, accountId) {
        var value = localStorage.getItem(this.paymentHistoryKey(blockchainId, accountId));
        var entries = value ? JSON.parse(value) : [];
        return entries.map(this.mapToPaymentHistoryEntry);
    };
    PaymentHistoryStoreLocalStorage.prototype.saveToStore = function (blockchainId, accountId, entries) {
        localStorage.setItem(this.paymentHistoryKey(blockchainId, accountId), JSON.stringify(entries.map(function (entry) { return entry.adaptForSerialization(); })));
    };
    PaymentHistoryStoreLocalStorage.prototype.mapToPaymentHistoryEntry = function (entry) {
        return new payment_history_entry_1.default(entry.isInput, entry.delta, entry.asset, Buffer.from(entry.assetId, 'hex'), entry.other, new Date(entry.timestamp), Buffer.from(entry.transactionId, 'hex'), entry.blockHeight);
    };
    PaymentHistoryStoreLocalStorage.prototype.deletePaymentHistory = function (accountId, blockchainId) {
        var e_1, _a, e_2, _b;
        if (blockchainId === void 0) { blockchainId = null; }
        var syncInfoKey = this.syncInfoKey(blockchainId, accountId);
        var paymentHistoryKey = this.paymentHistoryKey(blockchainId, accountId);
        try {
            for (var _c = __values(Object.keys(this.entriesCache)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var key = _d.value;
                if (this.entriesCache.hasOwnProperty(key) && key.startsWith(paymentHistoryKey)) {
                    delete this.entriesCache[key];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _e = __values(Object.keys(localStorage)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var key = _f.value;
                if (key.startsWith(paymentHistoryKey) || key.startsWith(syncInfoKey)) {
                    localStorage.removeItem(key);
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return)) _b.call(_e);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    return PaymentHistoryStoreLocalStorage;
}());
exports.default = PaymentHistoryStoreLocalStorage;
//# sourceMappingURL=payment-history-store-local-storage.js.map