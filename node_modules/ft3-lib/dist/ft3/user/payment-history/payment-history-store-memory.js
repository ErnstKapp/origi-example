"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var payment_history_iterator_1 = require("./payment-history-iterator");
var PaymentHistoryStoreMemory = /** @class */ (function () {
    function PaymentHistoryStoreMemory() {
        this.entriesCache = {};
        this.syncInfo = {};
    }
    PaymentHistoryStoreMemory.prototype.get = function (blockchainId, accountId, start, pageSize) {
        var entries = this.entriesCache[this.paymentHistoryKey(blockchainId, accountId)];
        if (entries.length < start) {
            return [];
        }
        return entries.slice(start, Math.min(entries.length, start + pageSize));
    };
    PaymentHistoryStoreMemory.prototype.getCount = function (blockchainId, accountId) {
        return (this.entriesCache[this.paymentHistoryKey(blockchainId, accountId)] || []).length;
    };
    PaymentHistoryStoreMemory.prototype.getIterator = function (blockchainId, accountId, pageSize) {
        return new payment_history_iterator_1.default(this, blockchainId, accountId, pageSize);
    };
    PaymentHistoryStoreMemory.prototype.getSyncInfo = function (blockchainId, accountId) {
        return this.syncInfo[this.syncInfoKey(blockchainId, accountId)] || {};
    };
    PaymentHistoryStoreMemory.prototype.save = function (blockchainId, accountId, paymentHistoryEntries) {
        var entries = this.entriesCache[this.paymentHistoryKey(blockchainId, accountId)] || [];
        this.entriesCache[this.paymentHistoryKey(blockchainId, accountId)] = paymentHistoryEntries.concat(entries);
    };
    PaymentHistoryStoreMemory.prototype.saveSyncInfo = function (blockchainId, accountId, syncInfo) {
        this.syncInfo[this.syncInfoKey(blockchainId, accountId)] = syncInfo;
    };
    PaymentHistoryStoreMemory.prototype.deletePaymentHistory = function (accountId, blockchainId) {
        var key = this.syncInfoKey(blockchainId, accountId);
        if (this.entriesCache[key]) {
            delete this.entriesCache[key];
        }
    };
    PaymentHistoryStoreMemory.prototype.paymentHistoryKey = function (blockchainId, accountId) {
        return "FT3_LIB_P_H_" + accountId.toString('hex').toUpperCase() + "_" + (blockchainId ? blockchainId.toString('hex').toUpperCase() : "");
    };
    PaymentHistoryStoreMemory.prototype.syncInfoKey = function (blockchainId, accountId) {
        return "FT3_LIB_P_H_S_I_" + accountId.toString('hex').toUpperCase() + "_" + (blockchainId ? blockchainId.toString('hex').toUpperCase() : "");
    };
    return PaymentHistoryStoreMemory;
}());
exports.default = PaymentHistoryStoreMemory;
//# sourceMappingURL=payment-history-store-memory.js.map