"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var payment_param_1 = require("./payment-param");
// PaymentOperation class is used to represent transfers and cross-chain transfers using one type. Original
// idea vas to implement PaymentOperation as adapter for for TransferOperation and XTransferOperation, to abstract
// different types of transfers, but that implementation would be more complex, and at the moment it looks like there
// is no value add from adding more complexity.
// When parsing raw transactions, inputs and outputs from transfers and cross-chain transfer will be copied to the
// PaymentOperation objects.
var PaymentOperation = /** @class */ (function () {
    function PaymentOperation(inputs, outputs) {
        this.inputs = inputs;
        this.outputs = outputs;
    }
    PaymentOperation.prototype.hasInputOrOutputWithChainAndAccount = function (chainId, accountId) {
        return this.inputs.some(function (input) { return input.isChainId(chainId) && input.isAccountId(accountId); }) ||
            this.outputs.some(function (output) { return output.isChainId(chainId) && output.isAccountId(accountId); });
    };
    PaymentOperation.prototype.inputsWithChainAndAccount = function (chainId, accountId) {
        return this.inputs.filter(function (input) { return input.isChainId(chainId) && input.isAccountId(accountId); });
    };
    PaymentOperation.prototype.outputsWithChainAndAccount = function (chainId, accountId) {
        return this.outputs.filter(function (output) { return output.isChainId(chainId) && output.isAccountId(accountId); });
    };
    PaymentOperation.prototype.inputsWithAsset = function (assetId) {
        return this.inputs.filter(function (output) { return output.isAssetId(assetId); });
    };
    PaymentOperation.prototype.outputsWithAsset = function (assetId) {
        return this.outputs.filter(function (output) { return output.isAssetId(assetId); });
    };
    PaymentOperation.fromTransfer = function (transfer, chainId) {
        var inputs = transfer.inputs.map(function (input) { return payment_param_1.default.fromTransferParam(input, chainId); });
        var outputs = transfer.outputs.map(function (output) { return payment_param_1.default.fromTransferParam(output, chainId); });
        return new PaymentOperation(inputs, outputs);
    };
    PaymentOperation.fromXTransfer = function (transfer, sourceChainId) {
        var input = payment_param_1.default.fromTransferParam(transfer.source, sourceChainId);
        var output = new payment_param_1.default(transfer.hops[transfer.hops.length - 1], transfer.target.accountId, transfer.source.assetId, transfer.source.amount);
        return new PaymentOperation([input], [output]);
    };
    return PaymentOperation;
}());
exports.default = PaymentOperation;
//# sourceMappingURL=payment-operation.js.map