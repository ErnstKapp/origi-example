"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var postchain_client_1 = require("postchain-client");
var operation_1 = require("../core/operation");
function addAuthDescriptor(accountId, authDescriptorId, authDescriptor) {
    return op('ft3.add_auth_descriptor', accountId, authDescriptorId, authDescriptor);
}
exports.addAuthDescriptor = addAuthDescriptor;
function transfer(inputs, outputs) {
    return op('ft3.transfer', inputs, outputs);
}
exports.transfer = transfer;
function xcTransfer(source, target, hops) {
    return op('ft3.xc.init_xfer', source, target, hops);
}
exports.xcTransfer = xcTransfer;
function deleteAllAuthDescriptorsExclude(accountId, excludeAuthDescriptorId) {
    return op('ft3.delete_all_auth_descriptors_exclude', accountId, excludeAuthDescriptorId);
}
exports.deleteAllAuthDescriptorsExclude = deleteAllAuthDescriptorsExclude;
function deleteAuthDescriptor(accountId, authDescriptorId, deleteAuthDescriptorId) {
    return op('ft3.delete_auth_descriptor', accountId, authDescriptorId, deleteAuthDescriptorId);
}
exports.deleteAuthDescriptor = deleteAuthDescriptor;
function nop() {
    return new operation_1.default('nop', postchain_client_1.util.randomBytes(32));
}
exports.nop = nop;
function op(name) {
    var args = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        args[_i - 1] = arguments[_i];
    }
    return new (operation_1.default.bind.apply(operation_1.default, __spread([void 0, name], args)))();
}
exports.op = op;
//# sourceMappingURL=account-operations.js.map