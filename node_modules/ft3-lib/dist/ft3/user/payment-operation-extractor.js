"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var postchain_client_1 = require("postchain-client");
var transfer_operation_1 = require("./payment-history/payment-operation/transfer-operation");
var xtransfer_operation_1 = require("./payment-history/payment-operation/xtransfer-operation");
var payment_operation_1 = require("./payment-history/payment-operation/payment-operation");
function isCustomPaymentOperation(operation) {
    var args = operation.args;
    if (args.length === 0) {
        return false;
    }
    var lastArgument = args[args.length - 1];
    if (!Array.isArray(lastArgument) || lastArgument.length === 0) {
        return false;
    }
    return lastArgument[0] === "simple_transfer" || lastArgument[0] === "transfer";
}
function extractPaymentDetails(operation) {
    var opName = operation.opName, args = operation.args;
    var lastArgument = args[args.length - 1];
    if (lastArgument[0] === "simple_transfer") {
        return { opName: opName, args: [[lastArgument[1]], [lastArgument[2]]] };
    }
    else if (lastArgument[0] === "transfer") {
        return { opName: opName, args: [lastArgument[1], lastArgument[2]] };
    }
    else {
        throw new Error("Cannot read transfer details");
    }
}
var PaymentOperationExtractor = /** @class */ (function () {
    function PaymentOperationExtractor(rawTransaction, chainId) {
        this.transaction = rawTransaction;
        this.chainId = chainId;
    }
    PaymentOperationExtractor.prototype.extract = function () {
        var _this = this;
        var transaction = postchain_client_1.gtx.deserialize(this.transaction);
        return transaction.operations.map(function (operation) {
            switch (operation.opName) {
                case 'ft3.transfer':
                    return payment_operation_1.default.fromTransfer(transfer_operation_1.default.from(operation), _this.chainId);
                case 'ft3.xc.init_xfer':
                    return payment_operation_1.default.fromXTransfer(xtransfer_operation_1.default.from(operation), _this.chainId);
                default:
                    if (isCustomPaymentOperation(operation)) {
                        return payment_operation_1.default.fromTransfer(transfer_operation_1.default.from(extractPaymentDetails(operation)), _this.chainId);
                    }
                    else {
                        return null;
                    }
            }
        }).filter(function (transfer) { return transfer; });
    };
    return PaymentOperationExtractor;
}());
exports.default = PaymentOperationExtractor;
//# sourceMappingURL=payment-operation-extractor.js.map