import BlockchainInfo from "./blockchain-info";
import ConnectionClient from '../connection-client';
import { Account, AuthDescriptor } from "../../user/account";
import Asset from "../../user/asset";
import DirectoryService from "./directory-service";
import TransactionBuilder from "../transaction-builder";
import BlockchainSession from "./blockchain-session";
import User from "../../user/user";
import Operation from "../operation";
export default class Blockchain {
    readonly id: Buffer;
    readonly info: BlockchainInfo;
    readonly connection: ConnectionClient;
    private readonly directoryService;
    constructor(id: Buffer, info: BlockchainInfo, connection: ConnectionClient, directoryService: DirectoryService);
    static initialize(blockchainRID: Buffer, directoryService: DirectoryService): Promise<Blockchain>;
    newSession(user: User): BlockchainSession;
    getAccountsByParticipantId(id: Buffer, user: User): Promise<Account[]>;
    getAccountsByAuthDescriptorId(id: Buffer, user: User): Promise<Account[]>;
    registerAccount(authDesciptor: AuthDescriptor, user: any): Promise<Account>;
    getAssetsByName(name: any): Promise<Asset[]>;
    getAssetById(id: Buffer): Promise<Asset>;
    getAllAssets(): Promise<Asset[]>;
    linkChain(chainId: Buffer): Promise<void>;
    isLinkedWithChain(chainId: Buffer): Promise<boolean>;
    getLinkedChainsIds(): Promise<Buffer[]>;
    getLinkedChains(): Promise<Blockchain[]>;
    query(name: string, params: any): Promise<any>;
    call(operation: Operation, user: User): Promise<void>;
    postRaw(rawTransaction: Buffer): Promise<void>;
    transactionBuilder(): TransactionBuilder;
}
