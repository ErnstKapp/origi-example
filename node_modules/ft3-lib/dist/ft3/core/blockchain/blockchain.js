"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var blockchain_info_1 = require("./blockchain-info");
var connection_client_1 = require("../connection-client");
var account_1 = require("../../user/account");
var asset_1 = require("../../user/asset");
var transaction_builder_1 = require("../transaction-builder");
var blockchain_session_1 = require("./blockchain-session");
var account_operations_1 = require("../../user/account-operations");
var Blockchain = /** @class */ (function () {
    function Blockchain(id, info, connection, directoryService) {
        this.id = id;
        this.info = info;
        this.connection = connection;
        this.directoryService = directoryService;
    }
    Blockchain.initialize = function (blockchainRID, directoryService) {
        return __awaiter(this, void 0, void 0, function () {
            var chainConnectionInfo, connection, info;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, directoryService.getChainConnectionInfo(blockchainRID)];
                    case 1:
                        chainConnectionInfo = _a.sent();
                        if (!chainConnectionInfo) {
                            throw new Error("Cannot find details for chain with RID: " + blockchainRID.toString('hex'));
                        }
                        connection = new connection_client_1.default(chainConnectionInfo.url, blockchainRID.toString('hex'));
                        return [4 /*yield*/, blockchain_info_1.default.getInfo(connection)];
                    case 2:
                        info = _a.sent();
                        return [2 /*return*/, new Blockchain(blockchainRID, info, connection, directoryService)];
                }
            });
        });
    };
    Blockchain.prototype.newSession = function (user) {
        return new blockchain_session_1.default(user, this);
    };
    Blockchain.prototype.getAccountsByParticipantId = function (id, user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, account_1.Account.getByParticipantId(id, this.newSession(user))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Blockchain.prototype.getAccountsByAuthDescriptorId = function (id, user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, account_1.Account.getByAuthDescriptorId(id, this.newSession(user))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Blockchain.prototype.registerAccount = function (authDesciptor, user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, account_1.Account.register(authDesciptor, this.newSession(user))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Blockchain.prototype.getAssetsByName = function (name) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, asset_1.default.getByName(name, this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Blockchain.prototype.getAssetById = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, asset_1.default.getById(id, this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Blockchain.prototype.getAllAssets = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, asset_1.default.getAssets(this)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Blockchain.prototype.linkChain = function (chainId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transactionBuilder()
                            .add(account_operations_1.op('ft3.xc.link_chain', chainId))
                            .build([])
                            .post()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Blockchain.prototype.isLinkedWithChain = function (chainId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.query('ft3.xc.is_linked_with_chain', { 'chain_rid': chainId })];
                    case 1: return [2 /*return*/, (_a.sent()) === 1];
                }
            });
        });
    };
    Blockchain.prototype.getLinkedChainsIds = function () {
        return __awaiter(this, void 0, void 0, function () {
            var linkedChains;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.query('ft3.xc.get_linked_chains', {})];
                    case 1:
                        linkedChains = _a.sent();
                        return [2 /*return*/, linkedChains.map(function (chainId) { return Buffer.from(chainId, 'hex'); })];
                }
            });
        });
    };
    Blockchain.prototype.getLinkedChains = function () {
        return __awaiter(this, void 0, void 0, function () {
            var chainIds;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getLinkedChainsIds()];
                    case 1:
                        chainIds = _a.sent();
                        return [2 /*return*/, new Promise(function (resolve) {
                                Promise.all(chainIds.map(function (chainId) { return new Promise(function (resolve) {
                                    Blockchain.initialize(chainId, _this.directoryService)
                                        .then(resolve)
                                        .catch(function () {
                                        console.warn("Cannot get info for chain with RID: " + chainId.toString('hex'));
                                        resolve(null);
                                    });
                                }); }))
                                    .then(function (chains) {
                                    resolve(chains.filter(function (chain) { return chain; }));
                                });
                            })];
                }
            });
        });
    };
    Blockchain.prototype.query = function (name, params) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.connection.query(name, params)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    Blockchain.prototype.call = function (operation, user) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.transactionBuilder()
                            .add(operation)
                            .build(user.authDescriptor.signers)
                            .sign(user.keyPair)
                            .post()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Blockchain.prototype.postRaw = function (rawTransaction) {
        return __awaiter(this, void 0, void 0, function () {
            var tx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        tx = this.connection.transactionFromRawTransaction(rawTransaction);
                        return [4 /*yield*/, tx.postAndWaitConfirmation()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Blockchain.prototype.transactionBuilder = function () {
        return new transaction_builder_1.default(this);
    };
    return Blockchain;
}());
exports.default = Blockchain;
//# sourceMappingURL=blockchain.js.map