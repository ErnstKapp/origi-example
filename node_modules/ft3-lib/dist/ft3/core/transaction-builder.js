"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var transaction_1 = require("./transaction");
Buffer.prototype.toGTV = function () {
    return this.toString('hex');
};
Array.prototype.toGTV = function () {
    return this.map(function (element) { return element === null ? null : element.toGTV(); });
};
String.prototype.toGTV = function () {
    return this;
};
Number.prototype.toGTV = function () {
    return this;
};
Boolean.prototype.toGTV = function () {
    return this ? 1 : 0;
};
var TransactionBuilder = /** @class */ (function () {
    function TransactionBuilder(blockchain) {
        this.operations = [];
        this.blockchain = blockchain;
    }
    TransactionBuilder.prototype.add = function (operation) {
        this.operations.push(operation);
        return this;
    };
    TransactionBuilder.prototype.build = function (signers) {
        var tx = this.blockchain.connection.newTransaction(signers);
        this.operations.forEach(function (o) { return tx.addOperation.apply(tx, __spread([o.name], o.args.map(function (a) { return a === null ? null : a.toGTV(); }))); });
        return new transaction_1.default(tx, this.blockchain);
    };
    TransactionBuilder.prototype.buildAndSign = function (user) {
        return this.build(user.authDescriptor.signers).sign(user.keyPair);
    };
    return TransactionBuilder;
}());
exports.default = TransactionBuilder;
//# sourceMappingURL=transaction-builder.js.map