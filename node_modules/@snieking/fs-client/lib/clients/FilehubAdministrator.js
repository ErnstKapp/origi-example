"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FilehubAdministrator = void 0;
const ft3_lib_1 = require("ft3-lib");
class FilehubAdministrator {
    constructor(filehub, admin) {
        this.filehub = filehub;
        this.admin = admin;
    }
    /**
     * Registers a Filechain to persist files in.
     *
     * @param user that is an admin of the filehub.
     * @param rid of the filechain.
     */
    registerFilechain(rid, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const trxBuilder = yield this.filehub.transactionBuilder();
            return trxBuilder.add((0, ft3_lib_1.op)('admin.add_filechain', rid, url)).build([this.admin.pubKey]).sign(this.admin).post();
        });
    }
    /**
     * Disables a Filechain
     */
    disableFilechain(rid) {
        return __awaiter(this, void 0, void 0, function* () {
            const trxBuilder = yield this.filehub.transactionBuilder();
            return trxBuilder
                .add((0, ft3_lib_1.op)('admin.disable_filechain', rid))
                .add((0, ft3_lib_1.nop)())
                .build([this.admin.pubKey])
                .sign(this.admin)
                .post();
        });
    }
    /**
     * Enables a Filechain
     */
    enableFilechain(rid, url) {
        return __awaiter(this, void 0, void 0, function* () {
            const trxBuilder = yield this.filehub.transactionBuilder();
            return trxBuilder
                .add((0, ft3_lib_1.op)('admin.enable_filechain', rid, url))
                .add((0, ft3_lib_1.nop)())
                .build([this.admin.pubKey])
                .sign(this.admin)
                .post();
        });
    }
    /**
     * Gets a Filechain from a filechain location.
     */
    getFilechain(filechainLocation) {
        return this.filehub.initFilechainClient(filechainLocation.location, filechainLocation.brid.toString('hex'));
    }
}
exports.FilehubAdministrator = FilehubAdministrator;
