"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const pcl = require("postchain-client");
class Filechain {
    constructor(nodeApiUrl, brid) {
        this.restClient = pcl.restClient.createRestClient(nodeApiUrl, brid, 10);
        this.gtxClient = pcl.gtxClient.createClient(this.restClient, Buffer.from(brid, 'hex'), []);
    }
    storeChunkData(user, data) {
        const tx = this.gtxClient.newTransaction([user.keyPair.pubKey]);
        tx.addOperation('fs.add_chunk_data', data);
        tx.sign(user.keyPair.privKey, user.keyPair.pubKey);
        try {
            return tx.postAndWaitConfirmation().catch(() => Promise.resolve());
        }
        catch (_a) {
            // TODO: Check error message. If it's not a duplicate chunk, throw error.
            // Error message is today not returned by the client.
            return Promise.resolve();
        }
    }
    chunkHashExists(hash) {
        return this.restClient.query('fs.chunk_hash_exists', { hash });
    }
    getChunkDataByHash(hash) {
        return this.restClient.query('fs.get_chunk', { hash });
    }
}
exports.default = Filechain;
