"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FsFile = void 0;
const crypto_1 = require("../utils/crypto");
const fs = require("fs");
const util = require("util");
class FsFile {
    constructor(data) {
        this.hash = (0, crypto_1.hashData)(data);
        this.data = data;
        this.chunks = FsFile.sliceIntoChunks(data);
        this.size = data.length;
    }
    static fromLocalFile(path) {
        return __awaiter(this, void 0, void 0, function* () {
            const readFile = util.promisify(fs.readFile);
            const data = yield readFile(path);
            return new FsFile(data);
        });
    }
    static fromData(data) {
        return new FsFile(data);
    }
    static fromChunks(chunks) {
        const dataChunks = chunks
            .sort((a, b) => a.idx - b.idx)
            .map((c) => c.data);
        const data = Buffer.concat(dataChunks);
        return new FsFile(data);
    }
    static sliceIntoChunks(data) {
        const nrOfChunks = Math.ceil(data.length / FsFile.BYTES);
        const chunks = [];
        for (let i = 0; i < nrOfChunks; i++) {
            chunks.push(data.slice(i * FsFile.BYTES, (i + 1) * FsFile.BYTES));
        }
        return chunks;
    }
    getChunk(index) {
        return this.chunks[index];
    }
    numberOfChunks() {
        return Math.ceil(this.size / FsFile.BYTES);
    }
}
exports.FsFile = FsFile;
FsFile.BYTES = 100000;
